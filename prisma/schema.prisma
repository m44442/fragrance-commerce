// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  phoneNumber      String?
  postalCode       String?
  prefecture       String?
  city             String?
  address          String?
  role             String         @default("USER")
  isAdmin          Boolean        @default(false)
  stripeCustomerId String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  sessions         Session[]
  favorites        Favorite[]
  cart             Cart?
  purchases        Purchase[]
  subscriptions    Subscription[]
  reviews          Review[]
  reviewHelpful    ReviewHelpful[]
  orders           Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  nameJp      String?
  description String?
  logoUrl     String?
  isFeatured  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id                String     @id @default(cuid())
  name              String
  brandId           String
  description       String?
  price             Int        @default(0)
  discountPrice     Int?
  stock             Int        @default(0)
  thumbnailUrl      String?
  topNotes          String?
  middleNotes       String?
  baseNotes         String?
  volume            Int?
  concentration     String?
  isPublished       Boolean    @default(true)
  isNew             Boolean    @default(false)
  isFeatured        Boolean    @default(false)
  microCmsId        String?    @unique
  microCmsUpdatedAt DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  brand             Brand      @relation(fields: [brandId], references: [id])
  favorites         Favorite[]
  cartItems         CartItem[]
  purchases         Purchase[]
  reviews           Review[]
  orderItems        OrderItem[]
  averageRating     Float?     @db.DoublePrecision
  reviewCount       Int        @default(0)
}

model Review {
  id           String   @id @default(cuid())
  rating       Int      @db.SmallInt // 1-5の範囲
  comment      String?  @db.Text
  userId       String
  productId    String
  isVerified   Boolean  @default(false) // 購入済みかどうか
  helpfulCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  helpfulVotes ReviewHelpful[] // 「参考になった」の投票記録

  @@unique([userId, productId]) // 1ユーザー1商品につき1レビュー
  @@index([productId, createdAt])
  @@index([productId, rating])
  @@index([isVerified])
}

model ReviewHelpful {
  id       String @id @default(cuid())
  reviewId String
  userId   String
  createdAt DateTime @default(now())
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId]) // 1ユーザー1レビューにつき1投票
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  isSample  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, isSample])
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  fragranceId String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  fragrance   Product  @relation(fields: [fragranceId], references: [id])

  @@unique([userId, fragranceId])
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELED
}

enum SubscriptionPlan {
  MONTHLY
  ANNUAL
}

model Subscription {
  id                    String               @id @default(cuid())
  userId                String
  stripeCustomerId      String?
  stripeSubscriptionId  String?              @unique
  plan                  SubscriptionPlan     @default(MONTHLY)
  status                SubscriptionStatus   @default(ACTIVE)
  nextDeliveryDate      DateTime?
  nextBillingDate       DateTime?
  preferCustomSelection Boolean              @default(false)
  deliveryOption        String?
  canceledAt            DateTime?
  endDate               DateTime?
  paymentFailed         Boolean              @default(false)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  user                  User                 @relation(fields: [userId], references: [id])
  deliveries            SubscriptionDelivery[]
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  FAILED
}

model SubscriptionDelivery {
  id             String         @id @default(cuid())
  subscriptionId String
  productId      String?
  productName    String?
  status         DeliveryStatus @default(PENDING)
  shippingDate   DateTime?
  deliveredDate  DateTime?
  customSelected Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  subscription   Subscription   @relation(fields: [subscriptionId], references: [id])
}

enum ShippingStatus {
  PENDING
  PREPARING
  SHIPPED
  DELIVERED
}

model Order {
  id             String         @id @default(cuid())
  orderNumber    String?        @unique
  userId         String
  total          Int            @default(0)
  subtotal       Int            @default(0)
  tax            Int            @default(0)
  shippingFee    Int            @default(0)
  shippingStatus ShippingStatus @default(PENDING)
  paymentStatus  String         @default("PENDING")
  paymentMethod  String?
  stripePaymentIntentId String?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  canceledAt     DateTime?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]
  shippingAddress ShippingAddress?
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String?
  productName String?
  quantity  Int      @default(1)
  price     Int      @default(0)
  isSample  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
}

model ShippingAddress {
  id         String  @id @default(cuid())
  orderId    String  @unique
  name       String
  postalCode String
  prefecture String
  city       String
  address1   String
  address2   String?
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order   @relation(fields: [orderId], references: [id])
}
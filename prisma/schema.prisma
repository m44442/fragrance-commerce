generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  phoneNumber      String?
  postalCode       String?
  prefecture       String?
  city             String?
  address          String?
  role             String          @default("USER")
  stripeCustomerId String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isAdmin          Boolean         @default(false)
  accounts         Account[]
  cart             Cart?
  favorites        Favorite[]
  orders           Order[]
  purchases        Purchase[]
  reviews          Review[]
  reviewHelpful    ReviewHelpful[]
  sessions         Session[]
  subscriptions    Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  nameJp      String?
  description String?
  logoUrl     String?
  isFeatured  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id                String      @id @default(cuid())
  name              String
  brandId           String
  description       String?
  price             Int         @default(0)
  discountPrice     Int?
  stock             Int         @default(0)
  thumbnailUrl      String?
  topNotes          String?
  middleNotes       String?
  baseNotes         String?
  volume            Int?
  concentration     String?
  isPublished       Boolean     @default(true)
  isNew             Boolean     @default(false)
  isFeatured        Boolean     @default(false)
  microCmsId        String?     @unique
  microCmsUpdatedAt DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  averageRating     Float?
  reviewCount       Int         @default(0)
  cartItems         CartItem[]
  favorites         Favorite[]
  orderItems        OrderItem[]
  brand             Brand       @relation(fields: [brandId], references: [id])
  purchases         Purchase[]
  reviews           Review[]
}

model Review {
  id           String          @id @default(cuid())
  rating       Int             @db.SmallInt
  comment      String?
  userId       String
  productId    String
  isVerified   Boolean         @default(false)
  helpfulCount Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  product      Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  helpfulVotes ReviewHelpful[]

  @@unique([userId, productId])
  @@index([productId, createdAt])
  @@index([productId, rating])
  @@index([isVerified])
}

model ReviewHelpful {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isSample  Boolean  @default(false)
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, isSample])
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  fragranceId String
  createdAt   DateTime @default(now())
  fragrance   Product  @relation(fields: [fragranceId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, fragranceId])
}

model Subscription {
  id                    String                 @id @default(cuid())
  userId                String
  stripeCustomerId      String?
  stripeSubscriptionId  String?                @unique
  plan                  SubscriptionPlan       @default(MONTHLY)
  status                SubscriptionStatus     @default(ACTIVE)
  nextDeliveryDate      DateTime?
  nextBillingDate       DateTime?
  preferCustomSelection Boolean                @default(false)
  deliveryOption        String?
  canceledAt            DateTime?
  endDate               DateTime?
  paymentFailed         Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  user                  User                   @relation(fields: [userId], references: [id])
  deliveries            SubscriptionDelivery[]
}

model SubscriptionDelivery {
  id             String         @id @default(cuid())
  subscriptionId String
  productId      String?
  productName    String?
  status         DeliveryStatus @default(PENDING)
  shippingDate   DateTime?
  deliveredDate  DateTime?
  customSelected Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  subscription   Subscription   @relation(fields: [subscriptionId], references: [id])
}

model Order {
  id                    String           @id @default(cuid())
  orderNumber           String?          @unique
  userId                String
  total                 Int              @default(0)
  subtotal              Int              @default(0)
  tax                   Int              @default(0)
  shippingFee           Int              @default(0)
  shippingStatus        ShippingStatus   @default(PENDING)
  paymentStatus         String           @default("PENDING")
  paymentMethod         String?
  stripePaymentIntentId String?
  shippedAt             DateTime?
  deliveredAt           DateTime?
  canceledAt            DateTime?
  notes                 String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  user                  User             @relation(fields: [userId], references: [id])
  orderItems            OrderItem[]
  shippingAddress       ShippingAddress?
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String?
  productName String?
  quantity    Int      @default(1)
  price       Int      @default(0)
  isSample    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])
}

model ShippingAddress {
  id         String   @id @default(cuid())
  orderId    String   @unique
  name       String
  postalCode String
  prefecture String
  city       String
  address1   String
  address2   String?
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELED
}

enum SubscriptionPlan {
  MONTHLY
  ANNUAL
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  FAILED
}

enum ShippingStatus {
  PENDING
  PREPARING
  SHIPPED
  DELIVERED
}

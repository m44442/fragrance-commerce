// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 認証関連のモデル
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  
  // カスタムフィールド
  lineId        String?   @unique
  phoneNumber   String?
  address       String?
  postalCode    String?
  prefecture    String?
  city          String?

  // リレーション
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  subscriptions Subscription[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  purchases     Purchase[]

  @@map("users")
}

model Purchase {
  id            String    @id @default(cuid())
  userId        String
  fragranceId   String
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fragrance     Product   @relation(fields: [fragranceId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 商品関連モデル
model Product {
  id               String      @id @default(cuid())
  name             String
  brandId          String
  description      String?     @db.Text
  price            Int
  discountPrice    Int?
  stock            Int         @default(0)
  thumbnailUrl     String?
  
  // MicroCMS連携用ID
  microCmsId       String?     @unique
  microCmsUpdatedAt DateTime?
  
  // 香水の特徴
  topNotes         String?
  middleNotes      String?
  baseNotes        String?
  volume           Int?        // ml単位
  concentration    String?     // EDT, EDP等
  
  // リレーション
  purchases        Purchase[]
  
  // 表示用フラグ
  isPublished      Boolean     @default(true)
  isNew            Boolean     @default(false)
  isFeatured       Boolean     @default(false)
  
  // レビュー集計
  averageRating    Float?
  reviewCount      Int         @default(0)
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([brandId])
  @@map("products")
}

// カート
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int

  @@map("cart_items")
}

// サブスクリプション関連のモデル
model Subscription {
  id                  String              @id @default(cuid())
  userId              String
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  status              SubscriptionStatus  @default(ACTIVE)
  plan                SubscriptionPlan    @default(MONTHLY)
  
  // Stripe情報
  stripeCustomerId    String?
  stripeSubscriptionId String?
  
  // 次回配送情報
  nextDeliveryDate    DateTime?
  
  // サブスクリプション履歴
  deliveries          SubscriptionDelivery[]
  
  startDate           DateTime            @default(now())
  endDate             DateTime?
  canceledAt          DateTime?
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@map("subscriptions")
}

model SubscriptionDelivery {
  id             String   @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  productId      String?
  productName    String
  status         DeliveryStatus @default(PENDING)
  
  shippingDate   DateTime?
  deliveredDate  DateTime?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("subscription_deliveries")
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELED
  EXPIRED
}

enum SubscriptionPlan {
  MONTHLY  // 月額
  QUARTERLY // 3ヶ月
  BIANNUAL  // 半年
  ANNUAL    // 年間
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  FAILED
}

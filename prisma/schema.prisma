generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?         @map("email_verified")
  image            String?
  lineId           String?           @unique
  phoneNumber      String?
  address          String?
  postalCode       String?
  prefecture       String?
  city             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  stripeCustomerId String?
  accounts         Account[]
  cart             Cart?
  favorites        Favorite[]
  purchaseHistory  PurchaseHistory[]
  purchases        Purchase[]
  sessions         Session[]
  subscriptions    Subscription[]
  reviews          Review[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id                String              @id @default(cuid())
  name              String
  brandId           String
  description       String?
  price             Int
  discountPrice     Int?
  stock             Int                 @default(0)
  thumbnailUrl      String?
  microCmsId        String?             @unique
  microCmsUpdatedAt DateTime?
  topNotes          String?
  middleNotes       String?
  baseNotes         String?
  volume            Int?
  concentration     String?
  isPublished       Boolean             @default(true)
  isNew             Boolean             @default(false)
  isFeatured        Boolean             @default(false)
  averageRating     Float?
  reviewCount       Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  cartItems         CartItem[]
  categories        CategoryOnProduct[]
  favorites         Favorite[]
  images            ProductImage[]
  scents            ProductScent[]
  brand             Brand               @relation(fields: [brandId], references: [id])
  purchaseHistory   PurchaseHistory[]
  purchases         Purchase[]
  themeProducts     ThemeProduct[]
  reviews           Review[]

  @@index([brandId])
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  nameJp      String?
  description String?
  logoUrl     String?
  microCmsId  String?   @unique
  isFeatured  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("brands")
}

model Category {
  id          String              @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  microCmsId  String?             @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  products    CategoryOnProduct[]

  @@map("categories")
}

model CategoryOnProduct {
  productId  String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("category_on_product")
}

model Scent {
  id          String         @id @default(cuid())
  name        String
  description String?
  microCmsId  String?        @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  products    ProductScent[]

  @@map("scents")
}

model ProductScent {
  productId String
  scentId   String
  intensity Int     @default(5)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  scent     Scent   @relation(fields: [scentId], references: [id], onDelete: Cascade)

  @@id([productId, scentId])
  @@map("product_scents")
}

model Theme {
  id          String         @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  microCmsId  String?        @unique
  isFeatured  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  products    ThemeProduct[]

  @@map("themes")
}

model ThemeProduct {
  themeId   String
  productId String
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  theme     Theme   @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@id([themeId, productId])
  @@map("theme_products")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  fragranceId String
  createdAt   DateTime @default(now())
  fragrance   Product  @relation(fields: [fragranceId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model PurchaseHistory {
  id            String   @id @default(cuid())
  userId        String
  productId     String
  quantity      Int      @default(1)
  price         Int
  paymentMethod String?
  paymentId     String?
  status        String   @default("completed")
  createdAt     DateTime @default(now())
  product       Product  @relation(fields: [productId], references: [id])
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchase_history")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Subscription {
  id                    String                 @id @default(cuid())
  userId                String
  status                SubscriptionStatus     @default(ACTIVE)
  plan                  SubscriptionPlan       @default(MONTHLY)
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  nextDeliveryDate      DateTime?
  startDate             DateTime               @default(now())
  endDate               DateTime?
  canceledAt            DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deliveryDate          Int?
  deliveryWeek          Int?
  nextBillingDate       DateTime?
  paymentMethodId       String?
  preferCustomSelection Boolean                @default(false)
  deliveries            SubscriptionDelivery[]
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model SubscriptionDelivery {
  id             String         @id @default(cuid())
  subscriptionId String
  productId      String?
  productName    String
  status         DeliveryStatus @default(PENDING)
  shippingDate   DateTime?
  deliveredDate  DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  customSelected Boolean        @default(false)
  subscription   Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("subscription_deliveries")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5の星評価
  comment     String?  // レビューコメント（任意）
  userId      String
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isVerified  Boolean  @default(false) // 購入検証済みフラグ
  helpfulCount Int     @default(0)     // 「参考になった」の数
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // 1ユーザー1商品につき1レビュー
  @@index([productId])
  @@index([userId])
  @@map("reviews")
}


enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELED
  EXPIRED
}

enum SubscriptionPlan {
  MONTHLY
  QUARTERLY
  BIANNUAL
  ANNUAL
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  FAILED
}
